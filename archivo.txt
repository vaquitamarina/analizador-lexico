TOKEN                          LEXEMA
--------------------------------------
PR_INCLUDE                     #include
HEADER                         <stdio.h>
PR_DEFINE                      #define
IDENTIFICADOR                  MAX_COUNT
LIT_INT                        10
PR_STRUCT                      struct
IDENTIFICADOR                  Point
LLAVE_AP                       {
PR_INT                         int
IDENTIFICADOR                  x
SE_PUNTO_COMA                  ;
PR_CHAR                        char
IDENTIFICADOR                  id
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
SE_PUNTO_COMA                  ;
PR_INT                         int
IDENTIFICADOR                  main
PARENTESIS_AP                  (
PARENTESIS_CE                  )
LLAVE_AP                       {
PR_INT                         int
IDENTIFICADOR                  i
OP_ASIGNACION                  =
LIT_INT                        0
SE_PUNTO_COMA                  ;
PR_STRUCT                      struct
IDENTIFICADOR                  Point
IDENTIFICADOR                  p1
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  p1
SE_PUNTO                       .
IDENTIFICADOR                  x
OP_ASIGNACION                  =
LIT_INT                        5
SE_PUNTO_COMA                  ;
IDENTIFICADOR                  p1
SE_PUNTO                       .
IDENTIFICADOR                  id
OP_ASIGNACION                  =
LIT_CHAR                       'A'
SE_PUNTO_COMA                  ;
PR_IF                          if
PARENTESIS_AP                  (
IDENTIFICADOR                  p1
SE_PUNTO                       .
IDENTIFICADOR                  x
OP_MAYOR                       >
IDENTIFICADOR                  MAX_COUNT
PARENTESIS_CE                  )
LLAVE_AP                       {
IDENTIFICADOR                  printf
PARENTESIS_AP                  (
LIT_STRING                     "Valor x: %d\n"
SE_COMA                        ,
IDENTIFICADOR                  p1
SE_PUNTO                       .
IDENTIFICADOR                  x
PARENTESIS_CE                  )
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
PR_ELSE                        else
LLAVE_AP                       {
PR_WHILE                       while
PARENTESIS_AP                  (
IDENTIFICADOR                  i
OP_MENOR                       <
LIT_INT                        3
PARENTESIS_CE                  )
LLAVE_AP                       {
IDENTIFICADOR                  i
OP_ASIGNACION                  =
IDENTIFICADOR                  i
OP_SUMA                        +
LIT_INT                        1
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
IDENTIFICADOR                  printf
PARENTESIS_AP                  (
LIT_STRING                     "ID: %c, i: %d\n"
SE_COMA                        ,
IDENTIFICADOR                  p1
SE_PUNTO                       .
IDENTIFICADOR                  id
SE_COMA                        ,
IDENTIFICADOR                  i
PARENTESIS_CE                  )
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
PR_RETURN                      return
LIT_INT                        0
SE_PUNTO_COMA                  ;
LLAVE_CE                       }
