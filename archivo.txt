PR_INCLUDE: #include
HEADER: <stdio.h>
PR_DEFINE: #define
IDENTIFICADOR: MAX_COUNT
DIGITO: 1
DIGITO: 0
PR_STRUCT: struct
IDENTIFICADOR: Point
LLAVE_AP: {
PR_INT: int
IDENTIFICADOR: x
SE_PUNTO_COMA: ;
PR_CHAR: char
IDENTIFICADOR: id
SE_PUNTO_COMA: ;
LLAVE_CE: }
SE_PUNTO_COMA: ;
PR_INT: int
IDENTIFICADOR: main
PARENTESIS_AP: (
PARENTESIS_CE: )
LLAVE_AP: {
PR_INT: int
IDENTIFICADOR: i
OP_ASIGNACION: =
DIGITO: 0
SE_PUNTO_COMA: ;
PR_STRUCT: struct
IDENTIFICADOR: Point
IDENTIFICADOR: p1
SE_PUNTO_COMA: ;
IDENTIFICADOR: p1
SE_PUNTO: .
IDENTIFICADOR: x
OP_ASIGNACION: =
DIGITO: 5
SE_PUNTO_COMA: ;
IDENTIFICADOR: p1
SE_PUNTO: .
IDENTIFICADOR: id
OP_ASIGNACION: =
Caracter no reconocido: '
IDENTIFICADOR: A
Caracter no reconocido: '
SE_PUNTO_COMA: ;
PR_IF: if
PARENTESIS_AP: (
IDENTIFICADOR: p1
SE_PUNTO: .
IDENTIFICADOR: x
OP_MAYOR: >
IDENTIFICADOR: MAX_COUNT
PARENTESIS_CE: )
LLAVE_AP: {
IDENTIFICADOR: printf
PARENTESIS_AP: (
Caracter no reconocido: "
IDENTIFICADOR: Valor
IDENTIFICADOR: x
OP_TERNARIO_ELSE: :
OP_MODULO: %
IDENTIFICADOR: d
Caracter no reconocido: \
IDENTIFICADOR: n
Caracter no reconocido: "
Caracter no reconocido: ,
IDENTIFICADOR: p1
SE_PUNTO: .
IDENTIFICADOR: x
PARENTESIS_CE: )
SE_PUNTO_COMA: ;
LLAVE_CE: }
PR_ELSE: else
LLAVE_AP: {
PR_WHILE: while
PARENTESIS_AP: (
IDENTIFICADOR: i
OP_MENOR: <
DIGITO: 3
PARENTESIS_CE: )
LLAVE_AP: {
IDENTIFICADOR: i
OP_ASIGNACION: =
IDENTIFICADOR: i
OP_SUMA: +
DIGITO: 1
SE_PUNTO_COMA: ;
LLAVE_CE: }
IDENTIFICADOR: printf
PARENTESIS_AP: (
Caracter no reconocido: "
IDENTIFICADOR: ID
OP_TERNARIO_ELSE: :
OP_MODULO: %
IDENTIFICADOR: c
Caracter no reconocido: ,
IDENTIFICADOR: i
OP_TERNARIO_ELSE: :
OP_MODULO: %
IDENTIFICADOR: d
Caracter no reconocido: \
IDENTIFICADOR: n
Caracter no reconocido: "
Caracter no reconocido: ,
IDENTIFICADOR: p1
SE_PUNTO: .
IDENTIFICADOR: id
Caracter no reconocido: ,
IDENTIFICADOR: i
PARENTESIS_CE: )
SE_PUNTO_COMA: ;
LLAVE_CE: }
PR_RETURN: return
DIGITO: 0
SE_PUNTO_COMA: ;
LLAVE_CE: }
